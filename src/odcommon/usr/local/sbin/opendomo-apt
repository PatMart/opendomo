#!/bin/sh
#desc: Install plugins deps
# opendomo-apt can be in 3 diferent states:
#    busy - opendomo-apt is working, installing package, updating system, updating sources
#    waiting - opendomo-apt is free, queue is emply and don't have other tasks pending
#    spaceless - opendomo-apt can't install packages because don't free space available.
#       Every task is canceled and is required save config and reboot to continue
#

# Copyright(c) 2014 OpenDomo Services SL. Licensed under GPL v3 or later

# Checking arch
test `arch` == "i686"   && ARCH="i386"
test `arch` == "armv6l" && ARCH="armhf"

# Files and directories
PIDFILE="/var/opendomo/run/opendomo-apt.pid"
LOGFILE="/var/opendomo/log/opendomo-apt.log"
DBGFILE="/var/opendomo/log/opendomo-apt.dbg"
SYSSTATE="/var/opendomo/run/Systembusy.pid"

DAEMONDIR="/var/opendomo/apt"
QUEUEFILE="$DAEMONDIR/queue"
SRCUPDATE="$DAEMONDIR/update"
LCKUPDATE="$DAEMONDIR/update_lock"
REPOFILE="$DAEMONDIR/repository.lst"
REPOTEMP="$DAEMONDIR/repository.tmp"

ODCOMPKG="odcommon_current_$ARCH.deb"
ODCGIPKG="odcgi_current_$ARCH.deb"
PLUGIN_DOWNDIR="$DAEMONDIR/plugins"
PLUGIN_FILEDIR="/var/opendomo/plugins"

# Commands options and messages
APTOPTS="--no-gui --without-recommends"
CURWEEK=`date +%W`
source /etc/os-release
REPOSITORY="http://cloud.opendomo.com/repo/$VERSION"
PACKAGEURL="http://es.opendomo.org/files"

# Creating directories and file permissions
mkdir -p $DAEMONDIR $PLUGIN_DOWNDIR
touch $QUEUEFILE
chown -R admin:admin $QUEUEFILE $PLUGIN_DOWNDIR $PIDFILE
test -f $LCKUPDATE && chown admin:admin $LCKUPDATE

### Add date to every line in log file
### To use: $command | add_date_to_log

add_date() {
    while IFS= read -r line; do
        echo "$(date "+%d/%m/%Y %R:%S -") $line"
    done
}

### Update apt and opendomo repository sources.
### You can active the funtion immediately using 'echo 0 > /var/opendomo/apt/update'

update_sources() {
    echo "Busy: Updating sources" > $PIDFILE
    echo "Updating sources"       > $SYSSTATE

    aptitude update | add_date
    echo "$CURWEEK" > $SRCUPDATE
    chown admin:admin $SRCUPDATE

    # Download plugins repository file
    rm $REPOTEMP $REPOFILE 2>/dev/null
    wget $REPOSITORY/ -O $REPOTEMP --no-check-certificate --max-redirect=0 2>&1 | add_date && grep -v "#" $REPOTEMP | grep "-" > $REPOFILE

    echo "Waiting"  > $PIDFILE
    rm $SYSTATE
}

### Check package size and memory free. The function return void value if package can be installed.
### The function need 2 arguments, $1 is action to do like install or safe-update and $2 is the package in install action

check_free_memory() {
    # Always clean downloaded packages before start
    aptitude -q clean | add_date

    # Check size info and convert units to Kb
    SIZEINFO=`echo 'n' | aptitude $APTOPTS -s $1 $2 | awk '/^Need to get/ {print $4,$5,$10,$11}' | sed 's/,/./g'`
    if [ `echo $SIZEINFO | cut -f2 -d" "` == "MB" ]; then
        PKG_DOWNLOAD_SIZE=`echo $SIZEINFO | cut -f1 -d" "`
        let PKG_DOWNLOAD_SIZE="`printf %.0f $PKG_DOWNLOAD_SIZE` * 1024"
    else
        PKG_DOWNLOAD_SIZE=`echo $SIZEINFO | cut -f1 -d" "`
        PKG_DOWNLOAD_SIZE=`printf %.0f $PKG_DOWNLOAD_SIZE`
    fi
    if [ `echo $SIZEINFO | cut -f4 -d" "` == "MB" ]; then
        PKG_INSTALL_SIZE=`echo $SIZEINFO | cut -f3 -d" "`
        let PKG_INSTALL_SIZE="`printf %.0f $PKG_INSTALL_SIZE` * 1024"
    else
        PKG_INSTALL_SIZE=`echo $SIZEINFO | cut -f3 -d" "`
        PKG_INSTALL_SIZE=`printf %.0f $PKG_INSTALL_SIZE`
    fi

    # Sum sizes and test free space
    PACKAGE_MEMORY_FREE=`/usr/local/bin/get_mem_free.sh | grep PACKAGE_MEMORY_FREE | cut -f2 -d=`
    let TOTAL_INSTALL_SIZE="$PKG_INSTALL_SIZE + $PKG_DOWNLOAD_SIZE + 5000"

    # Package information, send to debug file
    test -z $2 && echo "Update system info:"		 > $DBGFILE
    test -z $2 || echo "Installing $2 info:"		 > $DBGFILE
    echo "SIZEINFO=$SIZEINFO"                           >> $DBGFILE
    echo "PKG_DOWNLOAD_SIZE=$PKG_DOWNLOAD_SIZE"         >> $DBGFILE
    echo "PKG_INSTALL_SIZE=$PKG_INSTALL_SIZE"           >> $DBGFILE
    echo "TOTAL_INSTALL_SIZE=$TOTAL_INSTALL_SIZE"       >> $DBGFILE
    echo "PACKAGE_MEMORY_FREE=$PACKAGE_MEMORY_FREE"     >> $DBGFILE

    # No space available for this package, active spaceless mode
    test "$PACKAGE_MEMORY_FREE" -lt "$TOTAL_INSTALL_SIZE" && echo "-1" && echo "Spaceless" > $PIDFILE
}

### Update and install debian packages. If installation fail active apt db recovery
### The function need 2 arguments, $1 is action to do like install or safe-update and $2 is the package in install action

aptitude_install() {
    # Always clean downloaded packages before start
    aptitude -q clean | add_date

    # Installing package or updating system
    if [ "$1" == "install" ]; then
        echo "Busy: Installing $pkg" > $PIDFILE
        echo "Installing $pkg"       > $SYSSTATE
    else
        echo "Busy: Updating system" > $PIDFILE
        echo "Updating system"       > $SYSSTATE
    fi
    if
    LC_ALL=C LANGUAGE=C LANG=C DEBIAN_FRONTEND=noninteractive aptitude $APTOPTS -y -q $1 $2 | add_date
    then
        # Instalation complete, delete download files and clean queue
        echo "Waiting" > $PIDFILE
        rm $SYSSTATE
        aptitude -q clean | add_date
        /bin/sed -i "s/ $2//;/^$/d" $QUEUEFILE
        /bin/sed -i "s/$2//;/^$/d"  $QUEUEFILE
    else
        # Install is not complete, clean downloaded package and rebuild dpkg database
        echo "Busy: Rebuilding database" > $PIDFILE
        echo "Rebuilding database"       > $SYSSTATE

        apt-get clean       | add_date
        dpkg -a --configure | add_date
        apt-get -f install  | add_date
        echo "Waiting" > $PIDFILE
        rm $SYSSTATE
    fi

    # Copy opendomo configuration files for new packages
    manage_conf.sh copy &>/dev/null
}

### Install all plugin in $PLUGIN_FILEDIR, no need any argument to work
### In normal exit, funtion return void

plugins_install() {
    cd $PLUGIN_DOWNDIR
    for plugin in `ls * 2>/dev/null`; do
        # Checking installed deps from repo
        PLUGINDEPS=`grep $plugin $REPOFILE | cut -f4 -d";" | head -n1 | sed 's/ /\\|/g'`
        PLUGINNAME=`echo $plugin | cut -f1 -d"-"`
        QUEUEDEPS=`grep "$PLUGINSDEPS" $QUEUEFILE`

        # Check installed deps and install plugin
        if test -z "$QUEUEDEPS"; then
            cd /
            echo "Busy: Installing: $PLUGINNAME" > $PIDFILE
            echo "Installing $PLUGINNAME"        > $SYSSTATE
            echo "Installing $PLUGINNAME ..." | add_date

            if test `echo $plugin | grep ".tar.gz"`; then
                su admin -c "/bin/tar -m --no-overwrite-dir -zxvf $PLUGIN_DOWNDIR/$plugin | grep -v /$ \
                    >$PLUGIN_FILEDIR/$PLUGINNAME.files 2>$PLUGIN_FILEDIR/$PLUGINNAME.error"

            elif test `echo $plugin | grep ".zip"`; then
                su admin -c "/usr/local/bin/unzip -o $PLUGIN_DOWNDIR/$plugin | grep -v /$ \
                    | cut -f2 -d':' | sed 's/ //' >$PLUGIN_FILEDIR/$PLUGINNAME.files 2>$PLUGIN_FILEDIR/$PLUGINMANE.error"

            fi

            # Creating wrappers and delete downloaded files
            su admin -c "/usr/local/bin/createwrappers.sh"
            manage_conf.sh copy &>/dev/null
            rm "$PLUGIN_DOWNDIR/$plugin" &>/dev/null
            echo "Waiting" > $PIDFILE
            rm $SYSSTATE
        fi
    done
}

### Check installed plugin to find updates. When update is available, download plugin and enqueue dependecies
### No exit errors or arguments required

plugins_update() {
   cd $PLUGIN_FILEDIR
   for plugin in `ls -1 | grep version`; do
        # Checking plugin version
        PLUGIN=`echo $plugin | cut -f1 -d.`
        INSTALLED_VERSION=`cat $plugin`
        AVAILABLE_VERSION=`grep $PLUGIN $REPOFILE | head -n1 | cut -f1 -d";" | cut -f2 -d- | cut -f1 -d.`

        # Update plugin
        if [ $AVAILABLE_VERSION != $INSTALLED_VERSION ]; then
            # Enqueue dependecies, only new will be installed
            echo "Updating $PLUGIN ..." | add_date
            PLUGINDEPS=`grep $PLUGIN-$AVAILABLE_VERSION $REPOFILE | cut -f4 -d";" | sed 's/ /\\|/g'`
            echo -n $PLUGINSDEPS >> $QUEUEFILE

            # Download plugin
            cd $PLUGINSDIR
            /usr/local/bin/download.sh $DOWNURL | add_date
            cd $PLUGINS_FILEDIR
        fi
    done
}

### Delete plugins marked to remove. For remove plugins only $plugin.remove file in plugins directory is required
### No exit errors or arguments required

plugins_remove() {
    cd $PLUGIN_FILEDIR
    for plugin in `ls -1 | grep remove`; do
        # Updating package info
        PLUGINNAME=`echo $plugin | cut -f1 -d.`
        echo "Deleting $PLUGINNAME ..." | add_date
	echo "Busy: Deleting $PLUGINNAME" > $PIDFILE
        echo "Deleting $PLUGINNAME"       > $SYSSTATE

        # Delete plugins dependecies if not used anymore
        for dep in `cat $PLUGINNAME.deps`; do
            rm $PLUGINNAME.deps 2>/dev/null
            grep $dep *.deps &>/dev/null || LC_ALL=C LANGUAGE=C LANG=C DEBIAN_FRONTEND=noninteractive aptitude --no-gui -y -q remove "$dep" | add_date
        done

	# Clean auto installed packages
        LC_ALL=C LANGUAGE=C LANG=C DEBIAN_FRONTEND=noninteractive apt-get -y autoremove | add_date

        # Delete plugin files and emply directories
        for file in `cat $PLUGINNAME.files`; do
            DIRNAME=`dirname $file`
            rm -v /$file 2>/dev/null | add_date
            rmdir /$DIRNAME &> /dev/null
        done

        # Delete remaining files, and change status
	rm $PLUGINNAME.* 2>/dev/null
	echo "Waiting" > $PIDFILE
        rm $SYSSTATE
    done
}

### Install opendomo packages, packages always are reinstalled, with or without update. This method prevent packages corruption
### No exit errors or arguments required

odpackage_update() {
    echo "Busy: Updating opendomo packages" > $PIDFILE
    echo "Updating opendomo packages"       > $SYSSTATE
    echo "Updating opendomo packages" | add_date

    # Downloading packages
    cd $PLUGIN_DOWNDIR
    /usr/local/bin/download.sh $PACKAGEURL/$ODCOMPKG
    /usr/local/bin/download.sh $PACKAGEURL/$ODCGIPKG

    # Installing packages and dependecies
    if
    dpkg -i $ODCOMPKG $ODCGIPKG
    then
        rm $ODCOMPKG $ODCGIPKG
    else
        LC_ALL=C LANGUAGE=C LANG=C DEBIAN_FRONTEND=noninteractive sudo apt-get --force-yes -fyq install | add_date
        rm $ODCOMPKG $ODCGIPKG
    fi
    echo "Waiting" > $PIDFILE
    rm $SYSSTATE
}

### Loop function while $PIDFILE exist. No arguments required

while test -f $PIDFILE; do
    # Start if daemon is not in "spaceless" mode
    if [ `cat $PIDFILE | cut -f1 -d:` != "Spaceless" ]; then
        # Update functions once a week (sources and upgrade dependencies and plugins
        if ! test -f $SRCUPDATE || [ "$CURWEEK" != `cat $SRCUPDATE` ]; then
            update_sources

            # Checking memory before update system and plugins
            test -z `check_free_memory safe-upgrade` && aptitude_install safe-upgrade
            plugins_update
            test -f $LCKUPDATE || odpackage_update
        fi

        # Install dependecies and plugins
        for pkg in `cat $QUEUEFILE`; do
            # Checking memory before install package
            test -z `check_free_memory install $pkg` && aptitude_install install $pkg
        done
        plugins_install

        # Remove marked plugins
        plugins_remove

        sleep 3
    fi
done
