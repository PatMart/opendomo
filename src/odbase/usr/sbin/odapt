#!/bin/sh
#desc: Install plugins deps
# opendomo-apt can be in 3 diferent states:
#    busy - opendomo-apt is working, installing package, updating system, updating sources
#    waiting - opendomo-apt is free, queue is emply and don't have other tasks pending
#    stoping - opendomo-apt stops when is secure, all started tasks are finished
#    spaceless - opendomo-apt can't install packages because don't free space available.
#       Every task is canceled and is required save config and reboot to continue
#

# Copyright(c) 2015 OpenDomo Services SL. Licensed under GPL v3 or later

# Checking arch
test `arch` == "i686"   && ARCH="i386"
test `arch` == "armv6l" && ARCH="armhf"

# Files and directories
PIDFILE="/var/opendomo/run/opendomo-apt.pid"
LOGFILE="/var/opendomo/log/opendomo-apt.log"
DBGFILE="/var/opendomo/log/opendomo-apt.dbg"
UIDFILE="/etc/opendomo/uid"
SYSSTATUS="/var/www/data/status.json"

DAEMONDIR="/var/opendomo/apt"
QUEUEFILE="$DAEMONDIR/queue"
SRCUPDATE="$DAEMONDIR/update"
REPOFILE="$DAEMONDIR/repository.lst"
REPOTEMP="$DAEMONDIR/repository.tmp"
CURSTATE=`cat /var/opendomo/run/state.pid`

PLUGIN_DOWNDIR="$DAEMONDIR/plugins"
PLUGIN_FILEDIR="/var/opendomo/plugins"
PLUGIN_SERVDIR="/usr/local/opendomo/daemons"
PACKAG_DOWNDIR="$DAEMONDIR/packages"

# Commands options and messages
APTOPTS="--no-gui --without-recommends"
CURWEEK=`date +%j`
source /etc/os-release
REPOSITORY="http://cloud.opendomo.com/repo/$VERSION"
PACKAGEURL="http://es.opendomo.org/files"
CURRSTATUS=`cat $PIDFILE | cut -f1 -d:`
ODPKGMAJOR="2.2"

# Creating directories and file permissions
mkdir -p $DAEMONDIR $PLUGIN_DOWNDIR $PACKAG_DOWNDIR
touch $QUEUEFILE
chown -R admin:admin $QUEUEFILE $PLUGIN_DOWNDIR $PIDFILE $PACKAG_DOWNDIR

  ### Add date to every line in log file
  ### To use: $command | add_date_to_log

add_date() {
    while IFS= read -r line; do
        echo "$(date "+%d/%m/%Y %R:%S -") $line"
    done
}

  ### Change system state. System can be in active, busy or rebooting
  ### To use: $command $state

change_sysstatus() {
    echo "{\"status\":\"$1\"}" > $SYSSTATUS
}

  ### Update apt and opendomo repository sources.
  ### You can active the funtion immediately using 'echo 0 > /var/opendomo/apt/update'

case $1 in
  update_sources )

    # Generate PIDs, events and status
    [ "$CURRSTATUS" != "Stoping" ] && echo "Busy: Updating sources" > $PIDFILE
    change_sysstatus busy

    # Download plugins repository file, languages files and apt sources
    rm $REPOTEMP $REPOFILE 2>/dev/null
    wget $REPOSITORY/ -O $REPOTEMP --no-check-certificate --max-redirect=0 2>&1 | add_date && grep -v "#" $REPOTEMP | grep "-" > $REPOFILE
    su admin -c "/usr/local/opendomo/services/syscript/updateLanguageFiles.sh" | add_date
    aptitude update | add_date

    echo "$CURWEEK" > $SRCUPDATE
    chown admin:admin $SRCUPDATE

    [ "$CURRSTATUS" != "Stoping" ] && echo "Waiting" > $PIDFILE
    change_sysstatus active
  ;;

  ### Check package size and memory free. The function return void value if package can be installed.
  ### The function need 2 arguments, $2 is action to do like install or safe-update and $3 is the package in install action

  check_free_memory )

    # Always clean downloaded packages before start
    aptitude -q clean | add_date

    # Check size info and convert units to Kb
    SIZEINFO=`echo 'n' | aptitude $APTOPTS -s $2 $3 | awk '/^Need to get/ {print $4,$5,$10,$11}' | sed 's/,/./g'`
    test -z $SIZEINFO 2>/dev/null && SIZEINFO="0 MB 0 MB"
    if [ `echo $SIZEINFO | cut -f2 -d" "` == "MB" ]; then
        PKG_DOWNLOAD_SIZE=`echo $SIZEINFO | cut -f1 -d" "`
        let PKG_DOWNLOAD_SIZE="`printf %.0f $PKG_DOWNLOAD_SIZE` * 1024"
    else
        PKG_DOWNLOAD_SIZE=`echo $SIZEINFO | cut -f1 -d" "`
        PKG_DOWNLOAD_SIZE=`printf %.0f $PKG_DOWNLOAD_SIZE`
    fi
    if [ `echo $SIZEINFO | cut -f4 -d" "` == "MB" ]; then
        PKG_INSTALL_SIZE=`echo $SIZEINFO | cut -f3 -d" "`
        let PKG_INSTALL_SIZE="`printf %.0f $PKG_INSTALL_SIZE` * 1024"
    else
        PKG_INSTALL_SIZE=`echo $SIZEINFO | cut -f3 -d" "`
        PKG_INSTALL_SIZE=`printf %.0f $PKG_INSTALL_SIZE`
    fi

    # Sum sizes and test free space
    PACKAGE_MEMORY_FREE=`/usr/bin/get_mem_free.sh | grep PACKAGE_MEMORY_FREE | cut -f2 -d=`
    let TOTAL_INSTALL_SIZE="$PKG_INSTALL_SIZE + $PKG_DOWNLOAD_SIZE + 5000"

    # Package information, send to debug file
    test -z $3 && echo "Update system info:"		 > $DBGFILE
    test -z $3 || echo "Installing $3 info:"		 > $DBGFILE
    echo "SIZEINFO=$SIZEINFO"                           >> $DBGFILE
    echo "PKG_DOWNLOAD_SIZE=$PKG_DOWNLOAD_SIZE"         >> $DBGFILE
    echo "PKG_INSTALL_SIZE=$PKG_INSTALL_SIZE"           >> $DBGFILE
    echo "TOTAL_INSTALL_SIZE=$TOTAL_INSTALL_SIZE"       >> $DBGFILE
    echo "PACKAGE_MEMORY_FREE=$PACKAGE_MEMORY_FREE"     >> $DBGFILE

    # No space available for this package, active spaceless mode
    test "$PACKAGE_MEMORY_FREE" -lt "$TOTAL_INSTALL_SIZE" && echo "-1" && echo "Spaceless" > $PIDFILE
  ;;

  ### Update and install debian packages. If installation fail active apt db recovery
  ### The function need 2 arguments, $2 is action to do like install or safe-update and $3 is the package in install action

  aptitude_install )

    # Always clean downloaded packages before start
    aptitude -q clean | add_date

    # Installing package or updating system
    if [ "$2" == "install" ]; then
        # Generate PIDs, events and status
        [ "$CURRSTATUS" != "Stoping" ] && echo "Busy: Installing $pkg" > $PIDFILE
        change_sysstatus busy
    else
        # Generate PIDs, events and status
        [ "$CURRSTATUS" != "Stoping" ] && echo "Busy: Updating system" > $PIDFILE
        change_sysstatus busy
    fi
    if
    LC_ALL=C LANGUAGE=C LANG=C DEBIAN_FRONTEND=noninteractive aptitude $APTOPTS -y -q $2 $3 | add_date
    then
        # Instalation complete, delete download files and clean queue
        aptitude -q clean | add_date
        [ "$2" == "install" ] && /bin/sed -i "s/$3//"    $QUEUEFILE
        /bin/sed -i 's/ \+/ /g' $QUEUEFILE
    else
        # Install is not complete, clean downloaded package and rebuild dpkg database
        [ "$CURRSTATUS" != "Stoping" ] && echo "Busy: Rebuilding database" > $PIDFILE
        apt-get clean       | add_date
        dpkg -a --configure | add_date
        apt-get -f install  | add_date
    fi

    # Copy opendomo configuration files for new packages
    manage_conf.sh copy &>/dev/null
    [ "$CURRSTATUS" != "Stoping" ] && echo "Waiting" > $PIDFILE
    change_sysstatus active
  ;;

  ### Install all plugin in $PLUGIN_FILEDIR, no need any argument to work
  ### In normal exit, funtion return void

  plugins_install )

    cd $PLUGIN_DOWNDIR
    for plugin in `ls * 2>/dev/null`; do
        # Checking installed deps from repo
        PLUGINDEPS=`grep $plugin $REPOFILE | cut -f4 -d";" | head -n1 | sed 's/ /\\|/g'`
        PLUGINNAME=`echo $plugin | cut -f1 -d"-"`
        PLUGINVERS=`grep $plugin $REPOFILE | cut -f2 -d"-" | cut -f1 -d.`
        QUEUEDEPS=`grep "$PLUGINSDEPS" $QUEUEFILE`

        # Check installed deps and install plugin
        if test -z "$QUEUEDEPS"; then
            cd /
            # Generate PIDs, events and status
            [ "$CURRSTATUS" != "Stoping" ] && echo "Busy: Installing: $PLUGINNAME" > $PIDFILE
            change_sysstatus busy
            echo "Installing $PLUGINNAME ..." | add_date
            logevent plugininstall odbase 'Plugin installed' "$PLUGINNAME" &

            if test `echo $plugin | grep ".tar.gz"`; then
                su admin -c "/bin/tar -m --no-overwrite-dir -zxvf $PLUGIN_DOWNDIR/$plugin | grep -v /$ \
                    >$PLUGIN_FILEDIR/$PLUGINNAME.files 2>$PLUGIN_FILEDIR/$PLUGINNAME.error"

            elif test `echo $plugin | grep ".zip"`; then
                su admin -c "/usr/local/bin/unzip -o $PLUGIN_DOWNDIR/$plugin | grep -v /$ \
                    | cut -f2 -d':' | sed 's/ //' >$PLUGIN_FILEDIR/$PLUGINNAME.files 2>$PLUGIN_FILEDIR/$PLUGINMANE.error"

            fi

            # Creating wrappers, version and delete downloaded files
            su admin -c "/usr/bin/createwrappers.sh"
            echo "$PLUGINVERS" >$PLUGIN_FILEDIR/$PLUGINNAME.version && chown admin:admin $PLUGIN_FILEDIR/$PLUGINNAME.version
            odconfmng &>/dev/null
            rm "$PLUGIN_DOWNDIR/$plugin" &>/dev/null

            [ "$CURRSTATUS" != "Stoping" ] && echo "Waiting" > $PIDFILE
            change_sysstatus active

            # Starting plugins services
            for serv in `grep $PLUGIN_SERVDIR $PLUGIN_FILEDIR/$PLUGINNAME.files`; do
                 SERVICE=`basename $serv`
                 /usr/sbin/odservice $SERVICE start | add_date
            done
        fi
    done
  ;;

  ### Check installed plugin to find updates. When update is available, download plugin and enqueue dependecies
  ### No exit errors or arguments required

  plugins_update )
   for plugin in `ls -1 $PLUGIN_FILEDIR/*.version`; do
        # Checking plugin version
        PLUGIN=`basename $plugin | cut -f1 -d.`
        test -f $plugin && INSTALLED_VERSION="`cat $plugin`"
        AVAILABLE_VERSION="`grep ^$PLUGIN $REPOFILE | tail -n1 | cut -f1 -d";" | cut -f2 -d- | cut -f1 -d.`"

        # Update plugin; only plugins in repository file can be updated
        if ! test -z "$AVAILABLE_VERSION" && ! test -z "$INSTALLED_VERSION"
		then
            if [ $AVAILABLE_VERSION -gt $INSTALLED_VERSION ]; then
                # Enqueue dependecies, only new will be installed
                echo "Updating plugin: $PLUGIN to $AVAILABLE_VERSION" | add_date
                PLUGINDEPS=`grep $PLUGIN-$AVAILABLE_VERSION $REPOFILE | cut -f4 -d";" | sed 's/ /\\|/g'`
                echo -n $PLUGINSDEPS >> $QUEUEFILE

                # Download plugin
                DOWNURL=`grep $PLUGIN $REPOFILE | tail -n1 | cut -f2 -d";"`
                cd $PLUGIN_DOWNDIR
                download.sh $DOWNURL

                # Trigger event
                logevent pluginupdate odbase 'Plugin updated' "$PLUGIN" &
            else
                echo "Plugin $PLUGIN is already updated" | add_date
            fi
        fi
    done
  ;;

  ### Delete plugins marked to remove. For remove plugins only $plugin.remove file in plugins directory is required
  ### No exit errors or arguments required

  plugins_remove )
    cd $PLUGIN_FILEDIR
    for plugin in `ls -1 | grep remove`; do
        # Updating package info
        PLUGINNAME=`echo $plugin | cut -f1 -d.`

        # Generate PIDs, trigger events and status
        echo "Deleting $PLUGINNAME ..." | add_date
        [ "$CURRSTATUS" != "Stoping" ] && echo "Busy: Deleting $PLUGINNAME" > $PIDFILE
        change_sysstatus busy
        logevent pluginremove odbase 'Plugin removed' "$PLUGINNAME" &

        # Delete plugins dependecies if not used anymore
        for dep in `cat $PLUGINNAME.deps`; do
            rm $PLUGINNAME.deps 2>/dev/null
            grep $dep *.deps &>/dev/null || LC_ALL=C LANGUAGE=C LANG=C DEBIAN_FRONTEND=noninteractive aptitude --no-gui -y -q remove "$dep" | add_date
        done

	# Clean auto installed packages
        LC_ALL=C LANGUAGE=C LANG=C DEBIAN_FRONTEND=noninteractive apt-get -y autoremove | add_date

        # Delete plugin files and emply directories
        for file in `cat $PLUGINNAME.files`; do
            DIRNAME=`dirname $file`
            rm -v /$file 2>/dev/null | add_date
            rmdir /$DIRNAME &> /dev/null
        done

        # Delete old wrappers, remaining files, and change status
        su admin -c "/usr/bin/createwrappers.sh"
	rm $PLUGINNAME.* 2>/dev/null

        [ "$CURRSTATUS" != "Stoping" ] && echo "Waiting" > $PIDFILE
        change_sysstatus active
    done
  ;;

  ### Update opendomo package. Check last version, update and install
  ### No exit errors or arguments required

  odpackage_update )
    # Generate PIDs y status
    [ "$CURRSTATUS" != "Stoping" ] && echo "Busy: Updating opendomo packages" > $PIDFILE
    change_sysstatus busy
    echo "Updating opendomo packages" | add_date
    cd $PACKAG_DOWNDIR

    # Searching last version of odbase
    let ODBASEUPD=`apt-cache show odbase | grep Version | awk '{print$2}' | cut -f3 -d.`+1
    ODBASEPKG="odbase_"$ODPKGMAJOR"."$ODBASEUPD"_$ARCH.deb"
    while download.sh "$PACKAGEURL/$ODBASEPKG" &>/dev/null; do
        let ODBASEUPD=$ODBASEUPD+1
        ODBASEPKG="odbase_"$ODPKGMAJOR"."$ODBASEUPD"_$ARCH.deb"
    done

    # Updating last version of odbase
    let ODBASEUPD=$ODBASEUPD-1
    ODBASEPKG="odbase_"$ODPKGMAJOR"."$ODBASEUPD"_$ARCH.deb"

    if test -f $ODBASEPKG; then
        echo "Installing odbase version $ODPKGMAJOR.$ODCOMUPD ..."  | add_date
        LC_ALL=C LANGUAGE=C LANG=C DEBIAN_FRONTEND=noninteractive dpkg -i $ODBASEPKG

        # Trigger event
        logevent debupgrade odbase 'Package odbase updated' &
    else
    	echo "odbase version "$ODPKGMAJOR"."$ODBASEUPD" don't exist yet" | add_date
    fi

    # Cleaning packages
    rm *.deb 2>/dev/null

    # Installing new dependecies
    LC_ALL=C LANGUAGE=C LANG=C DEBIAN_FRONTEND=noninteractive apt-get --force-yes -fyq install | add_date
    [ "$CURRSTATUS" != "Stoping" ] && echo "Waiting" > $PIDFILE
    change_sysstatus active
  ;;
esac
