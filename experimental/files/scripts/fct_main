#!/bin/bash

FUNCDIR=files/scripts/
source $FUNCDIR/fct_vars
source $FUNCDIR/fct_build
source $FUNCDIR/fct_export

case $1 in
    clean )
        echo -e "########## Cleaning OpenDomoOS SDK ##########"
        echo
        echo -ne "[${INFO} 1/1 ${NORL}] Cleaning SDK ...                                          "
        if rm -r $TEMPDIR/* &>/dev/null; then
            echo -e "(${DONE}done${NORL})"
        else
            echo -e "(${ERRO}failed${NORL})"
            exit 1
        fi
        echo
    ;;
    build )
        # Previous checks before build
        if test -z $2; then
            echo -e "[${ERRO} err ${NORL}] You need select a valid arch [ i386 or arm ]"      & exit 1
        elif [ "$2" != "arm" ] && [ "$2" != "i386" ]; then
            echo -e "[${ERRO} err ${NORL}] Selected arch is not valid [ i386 or arm ]"        & exit 1
        elif [ "$2" = "arm" ] && ! test -x /usr/bin/qemu-arm-static; then
            echo -e "[${ERRO} err ${NORL}] You need install qemu-user-static build arm image" & exit 1
        else
            mkdir -p $EXPORTDIR $TEMPDIR $LOGSDIR $IMAGESDIR $MOUNTDIR
            chown `users | cut -f1 -d" "` $EXPORTDIR $TEMPDIR $LOGSDIR $IMAGESDIR $MOUNTDIR
        fi

        echo -e "########## Building OpenDomoOS packages for $2 ##########"
        echo
        echo -ne "[${INFO} 1/5 ${NORL}] Downloading rootfs package ...                            "
        download_target
        echo -ne "[${INFO} 2/5 ${NORL}] Extract rootfs package ...                                "
        extract_target
        echo -ne "[${INFO} 3/5 ${NORL}] Build rootstrap image ...                                 "
        build_rootstrap
        echo -ne "[${INFO} 4/5 ${NORL}] Creating opendomo package ...                             "
        create_packages
        echo -ne "[${INFO} 5/5 ${NORL}] Install opendomo package in rootfs ...                    "
        install_packages
        echo
    ;;
    assemble )
        # Previous checks before assemble
        if test -z $2; then
            echo -e "[${ERRO} err ${NORL}] You need select a valid arch [ i386 or arm ]"      & exit 1
        elif [ "$2" != "arm" ] && [ "$2" != "i386" ]; then
            echo -e "[${ERRO} err ${NORL}] Selected arch is not valid [ i386 or arm ]"        & exit 1
        elif [ "$2" = "arm" ] && ! test -x /usr/bin/qemu-arm-static; then
            echo -e "[${ERRO} err ${NORL}] You need install qemu-user-static build arm image" & exit 1
        else
            mkdir -p $EXPORTDIR $TEMPDIR $LOGSDIR $IMAGESDIR $MOUNTDIR
            chown `users | cut -f1 -d" "` $EXPORTDIR $TEMPDIR $LOGSDIR $IMAGESDIR $MOUNTDIR
        fi

        echo -e "########## Building OpenDomoOS for $2 ##########"
        echo
        echo -ne "[${INFO} 1/3 ${NORL}] Downloading rootfs package ...                            "
        download_target
        echo -ne "[${INFO} 2/3 ${NORL}] Extract rootfs package ...                                "
        extract_target
        echo -ne "[${INFO} 3/3 ${NORL}] Install opendomo package in rootfs ...                    "
        install_packages
        echo
    ;;
    export )
        # Previous checks before export
        if test -z $2; then
            echo -e "[${ERRO} err ${NORL}] You need select a valid export [ vmdk, sd or rpi ]" & exit 1
        elif [ "$2" != "sd" ] && [ "$2" != "vmdk" ] && [ "$2" != "rpi" ]; then
            echo -e "[${ERRO} err ${NORL}] Selected option is not valid [ vmdk, sd or rpi ]"   & exit 1
        elif [ "$2" = "rpi" ] && test -z $3; then
            echo -e "[${ERRO} err ${NORL}] You need select disk to export [ sda, sdb, sdc ]"   & exit 1
        elif [ "$2" = "rpi" ] && ! test -x /sbin/parted; then
            echo -e "[${ERRO} err ${NORL}] You need install parted for sd export"              & exit 1
        elif [ "$2" = "rpi" ] && ! test -x /usr/bin/qemu-arm-static; then
            echo -e "[${ERRO} err ${NORL}] You need install qemu-user-static for arm export"   & exit 1
        elif [ "$2" = "rpi" ] && test `echo "${3: -1}"` -eq `echo "${3: -1}"` 2>/dev/null; then
            echo -e "[${ERRO} err ${NORL}] You need select disk to export no a partition"      & exit 1
        elif [ "$2" = "rpi" ] && ! test -e /dev/$3; then
            echo -e "[${ERRO} err ${NORL}] Selected device don't exist"                        & exit 1
        elif [ "$2" = "vmdk" ] && ! test -x /usr/bin/qemu-img; then
            echo -e "[${ERRO} err ${NORL}] You need install qemu-utils for vmdk export"        & exit 1
        elif [ "$2" = "vmdk" ] && ! test -x /usr/bin/extlinux; then
            echo -e "[${ERRO} err ${NORL}] You need install extlinux for vmdk export"          & exit 1
        elif [ "$2" = "sd" ] && test -z $3; then
            echo -e "[${ERRO} err ${NORL}] You need select disk to export [ sda, sdb, sdc ]"   & exit 1
        elif [ "$2" = "sd" ] && ! test -x /usr/bin/syslinux; then
            echo -e "[${ERRO} err ${NORL}] You need install syslinux for sd export"            & exit 1
        elif [ "$2" = "sd" ] && ! test -x /sbin/parted; then
            echo -e "[${ERRO} err ${NORL}] You need install parted for sd export"              & exit 1
        elif [ "$2" = "sd" ] && test `echo "${3: -1}"` -eq `echo "${3: -1}"` 2>/dev/null; then
            echo -e "[${ERRO} err ${NORL}] You need select disk to export no a partition"      & exit 1
        elif [ "$2" = "sd" ] && ! test -b /dev/$3; then
            echo -e "[${ERRO} err ${NORL}] Selected device don't exist"                        & exit 1
        fi

	echo -e "########## Exporting OpenDomoOS to $2 ##########"
        echo
        if [ "$2" != "vmdk" ]; then
            echo -ne "[${WARN} ask ${NORL}] This action delete all data in $3, are you sure? (y/n)   "
            read -s -n1 ASK
            if [ "$ASK" = "y" ]; then
		echo -e "(${DONE}yes${NORL})"
            else
                echo -e "(${ERRO}no${NORL})" && exit 1
            fi
	fi
        create_image
        export_to_$2 $3
        echo
    ;;
esac
